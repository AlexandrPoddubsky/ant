<?php/*	Awesome New Templates	{{ }}	{{{ }}}	{# #}	{* *}	{@if }	{@import}*/?><?php	require_once __DIR__ . '/ant/ant.parser.php';	require_once __DIR__ . '/ant/ant.helper.php';	require_once __DIR__ . '/ant/ant.io.php';	require_once __DIR__ . '/ant/ant.fn.php';	require_once __DIR__ . '/ant/ant.cache.php';	require_once __DIR__ . '/ant/ant.exception.php';	class Ant	{		private static $settings = array();		private $assign = array();		private $tmpl_path   = "";		private $cache_path  = "";		public $buffer  = null;		private static $cache_obj = null;		//public static $fn = null;		public function setup($s){			self::$settings = $s;			self::$cache_obj = new Ant\Cache($s['map']);			//self::$fn = new Ant\Fn();			return $this;		}		public static function init()		{			return new self();		}		public function get($path){			$this->tmpl_path  = self::$settings['path'] . "/" . str_replace('.', '/', $path) . '.php';			if(false == file_exists($this->tmpl_path))				throw new Ant\AntException('Template file not found at ' . $this->tmpl_path);			$this->cache_path = self::$settings['cache'] . "/" . $path . '.php';			return $this;		}		public function assign(array $data = array()){			$this->assign = $data;			return $this;		}		public function draw(){			$closure = $this;			if(false == self::$cache_obj->check($this->tmpl_path)){				Ant\IO::init()				->in($this->tmpl_path)				->get(function($cnt)use($closure){					$cnt = preg_replace_callback('/{\*.*\*}/ms', 'Ant\Parser::comment', $cnt);					$cnt = preg_replace_callback('/{{{.+?}}}?/', 'Ant\Parser::escape', $cnt);					$cnt = preg_replace_callback('/{{.+?}}?/', 'Ant\Parser::variable', $cnt);					$cnt = preg_replace_callback('/{@import.+}?/', 'Ant\Parser::import', $cnt);					$cnt = preg_replace_callback('/{@.+?}/ms', 'Ant\Parser::control', $cnt);					$closure->buffer = $cnt;				})				->out()				->in($this->cache_path)				->set($this->buffer)				->out();				$this->buffer = null;			}			ob_start();			extract($this->assign);			include $this->cache_path;			$echo = ob_get_contents();			ob_end_clean();			return $echo;		}		public function __destruct(){}	}?>